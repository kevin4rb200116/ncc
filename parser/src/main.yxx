
%require "3.8.2"
%header
%locations

%code top {
  #include <string>
  #include <vector>

  #include "ast.hh"
  #include "lexer.hh"

  using std::string;
  using std::vector;

  int yyerror(const char *msg);
  int name_leng;
}

%union{
  void *pointer;
}

%define api.token.prefix {TOKEN_}
%token
  LPAR
  RPAR
  COMMA
  SEMI
  PLUS
  MINUS
  STAR
  SLASH

  LSQB
  RSQB
  COLON
  VBAR
  AMPER
  LESS
  GREATER
  EQUAL
  DOT
  PERCENT
  LBRACE
  RBRACE
  EQEQUAL
  NOTEQUAL
  LESSEQUAL
  GREATEREQUAL
  TILDE
  CIRCUMFLEX
  LEFTSHIFT
  RIGHTSHIFT
  DOUBLESTAR
  PLUSEQUAL
  MINEQUAL
  STAREQUAL
  SLASHEQUAL
  PERCENTEQUAL
  AMPEREQUAL
  VBAREQUAL
  CIRCUMFLEXEQUAL
  LEFTSHIFTEQUAL
  RIGHTSHIFTEQUAL
  DOUBLESTAREQUAL
  DOUBLESLASH
  DOUBLESLASHEQUAL
  ELLIPSIS
  RARROW
  AT
  ATEQUAL
  HASHTAG

  DEF
  EXTERN

  IF
  THEN
  ELSE
  ENDIF

  FOR
  DO
  ENDFOR
  ;
//token

%token <pointer> // std::string
  NAME
  HEX_NUMBER
  BIN_NUMBER
  OCT_NUMBER
  DEC_NUMBER
  FLOAT_NUMBER
  ;
// token

%type <pointer> number
%type <pointer> name
%type <pointer> primary    // ast::Expression*

%type <pointer> expression // ast::Expression*
%type <pointer> prototype  // ast::Prototype*
%type <pointer> proto      // ast::Prototype*

%type <pointer> call_args  // vector<ast::Expression*>
%type <pointer> proto_args // vector<string>

%type <pointer> external   // ast::Prototype*
%type <pointer> top_level  // ast::Function*
%type <pointer> definition // ast::Function*

%% /* ================================= Begin ============================== */

%start program;
program: %empty | program statement;

statement:
    external   SEMI {
      ((ast::Prototype*) $external)
        -> irgen();
    }

  | definition SEMI {
    ((ast::Function*) $definition)
      -> irgen();
  }

  | top_level  SEMI {
    ((ast::Function*) $[top_level])
      -> irgen();
  }
;

definition[expr]: prototype[proto] expression[body] {
  $expr = (void*) new ast::Function(
    (ast::Prototype*) $proto,
    (ast::Expression*) $body
  );
};

top_level[expr]: expression[body] {
  $expr = (void*) new ast::Function(
    new ast::Prototype(
      "__anon_expr",
      new vector<string>()
    ),
    (ast::Expression*) $body
  );
};

proto_args[expr]:
    %empty {
      $expr = (void*) new vector<string>();
    }

  | NAME[arg] {
    $expr = (void*) new vector<string>();
    string *arg = (string*) $arg;

    ((vector<string>*) $expr)
      -> push_back(*arg);
  }

  | proto_args[rest] COMMA NAME[arg] {
    $expr = $rest;
    string *arg = (string*) $arg;

    ((vector<string>*) $expr)
      -> push_back(*arg);
  }
;

proto: NAME[name] LPAR proto_args[args] RPAR {
  string *name = (string*) $name;

  $proto = (void*) new ast::Prototype(
    *name,
    (vector<string>*) $args
  );
};

prototype: DEF proto {
  $prototype = $proto;
};

external: EXTERN proto {
  $external = $proto;
};

expression[expr]:
    primary

  | expression[lhs] PLUS primary[rhs] {
    $expr = (void*) new ast::Binary(
      "+",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }

  | expression[lhs] MINUS primary[rhs] {
    $expr = (void*) new ast::Binary(
      "-",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }

  | expression[lhs] STAR primary[rhs] {
    $expr = (void*) new ast::Binary(
      "*",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }

  | expression[lhs] LESS primary[rhs] {
    $expr = (void*) new ast::Binary(
      "<",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }

  | expression[lhs] GREATER primary[rhs] {
    $expr = (void*) new ast::Binary(
      ">",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }

  | expression[lhs] SLASH primary[rhs] {
    $expr = (void*) new ast::Binary(
      "/",
      (ast::Expression*) $lhs,
      (ast::Expression*) $rhs
    );
  }
;

primary:
  name | number
  | LPAR expression RPAR {
    $primary = $expression;
  }

  | IF expression[condition]
    THEN expression[then_body]
    ELSE expression[else_body]
    ENDIF {
      $primary = (void*) new ast::If(
        (ast::Expression*) $condition,
        (ast::Expression*) $[then_body],
        (ast::Expression*) $[else_body]
      );
  }

  | FOR expression[start] COMMA expression[end] COMMA expression[step]
    DO expression[body]
    ENDFOR {
      $primary = (void*) new ast::For(
        (ast::Expression*) $start,
        (ast::Expression*) $end,
        (ast::Expression*) $step,
        (ast::Expression*) $body
      );
  }
;

call_args[expr]:
    %empty {
      $expr = (void*) new vector<ast::Expression*>();
    }

  | expression[arg] {
      $expr = (void*) new vector<ast::Expression*>();

      ((vector<ast::Expression*>*) $expr)
        -> push_back((ast::Expression*) $arg);
    }

  | call_args[rest] COMMA expression[arg] {
    $expr = $rest;

    ((vector<ast::Expression*>*) $expr)
      -> push_back((ast::Expression*) $arg);
  }
;

name:
    NAME[str] {
      string *str = (string*) $str;

      $name = (void*) new ast::Variable(*str);
    }

  | NAME[str] LPAR call_args[args] RPAR {
    string *str = (string*) $str;

    $name = (void*) new ast::Call(
      *str,
      (vector<ast::Expression*>*) $args
    );
  }
;

number:
    BIN_NUMBER[str]   {
      string *str = (string*) $str;
      
      $number = (void*) new ast::Number(
        *str,
        ast::Number::BIN_NUMBER
      );
    }

  | OCT_NUMBER[str]   {
    string *str = (string*) $str;

    $number = (void*) new ast::Number(
      *str,
      ast::Number::OCT_NUMBER
    );
  }

  | DEC_NUMBER[str]   {
    string *str = (string*) $str;

    $number = (void*) new ast::Number(
      *str,
      ast::Number::DEC_NUMBER
    );
  }

  | HEX_NUMBER[str]   {
    string *str = (string*) $str;

    $number = (void*) new ast::Number(
      *str,
      ast::Number::HEX_NUMBER
    );
  }

  | FLOAT_NUMBER[str] {
    string *str = (string*) $str;

    $number = (void*) new ast::Number(
      *str,
      ast::Number::FLOAT_NUMBER
    );
  }
;

%% /* ================================= End ============================== */

int yyerror(const char *msg) {
	fprintf(
		stderr,
    "Error %d.%d-%d.%d: %s\n",
    yylloc.first_line,
    yylloc.first_column,
    yylloc.last_line,
    yylloc.last_column,
		msg
	);

	return 0;
}
