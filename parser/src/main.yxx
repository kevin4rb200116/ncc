
%require "3.8.2"
%header

%{
  #include <string>

  #include "ast.hh"
  #include "parser.hh"
  #include "lexer.hh"

  using std::string;

  int yyerror(const char *msg);
%}

%union{
  char* cstring;
}

%define api.token.prefix {TOKEN_}
%token <cstring> LPAR
%token <cstring> RPAR
%token <cstring> LSQB
%token <cstring> RSQB
%token <cstring> COLON
%token <cstring> COMMA
%token <cstring> SEMI
%token <cstring> PLUS
%token <cstring> MINUS
%token <cstring> STAR
%token <cstring> SLASH
%token <cstring> VBAR
%token <cstring> AMPER
%token <cstring> LESS
%token <cstring> GREATER
%token <cstring> EQUAL
%token <cstring> DOT
%token <cstring> PERCENT
%token <cstring> LBRACE
%token <cstring> RBRACE
%token <cstring> EQEQUAL
%token <cstring> NOTEQUAL
%token <cstring> LESSEQUAL
%token <cstring> GREATEREQUAL
%token <cstring> TILDE
%token <cstring> CIRCUMFLEX
%token <cstring> LEFTSHIFT
%token <cstring> RIGHTSHIFT
%token <cstring> DOUBLESTAR
%token <cstring> PLUSEQUAL
%token <cstring> MINEQUAL
%token <cstring> STAREQUAL
%token <cstring> SLASHEQUAL
%token <cstring> PERCENTEQUAL
%token <cstring> AMPEREQUAL
%token <cstring> VBAREQUAL
%token <cstring> CIRCUMFLEXEQUAL
%token <cstring> LEFTSHIFTEQUAL
%token <cstring> RIGHTSHIFTEQUAL
%token <cstring> DOUBLESTAREQUAL
%token <cstring> DOUBLESLASH
%token <cstring> DOUBLESLASHEQUAL
%token <cstring> ELLIPSIS
%token <cstring> RARROW
%token <cstring> AT
%token <cstring> ATEQUAL
%token <cstring> WHITESPACE
%token <cstring> COMMENT
%token <cstring> NAME
%token <cstring> HEX_NUMBER
%token <cstring> BIN_NUMBER
%token <cstring> OCT_NUMBER
%token <cstring> DEC_NUMBER
%token <cstring> FLOAT_NUMBER
%token <cstring> STRING

%% /* ================================= Begin ============================== */

%start program;

program:
    %empty
  | program statement
  ;

statement:
    LPAR            { fprintf(stdout, "parsed: { %s: '%s' }\n", "LPAR", $1); }
  | RPAR            { fprintf(stdout, "parsed: { %s: '%s' }\n", "RPAR", $1); }
  | LSQB            { fprintf(stdout, "parsed: { %s: '%s' }\n", "LSQB", $1); }
  | RSQB            { fprintf(stdout, "parsed: { %s: '%s' }\n", "RSQB", $1); }
  | COLON           { fprintf(stdout, "parsed: { %s: '%s' }\n", "COLON", $1); }
  | COMMA           { fprintf(stdout, "parsed: { %s: '%s' }\n", "COMMA", $1); }
  | SEMI            { fprintf(stdout, "parsed: { %s: '%s' }\n", "SEMI", $1); }
  | PLUS            { fprintf(stdout, "parsed: { %s: '%s' }\n", "PLUS", $1); }
  | MINUS           { fprintf(stdout, "parsed: { %s: '%s' }\n", "MINUS", $1); }
  | STAR            { fprintf(stdout, "parsed: { %s: '%s' }\n", "STAR", $1); }
  | SLASH           { fprintf(stdout, "parsed: { %s: '%s' }\n", "SLASH", $1); }
  | VBAR            { fprintf(stdout, "parsed: { %s: '%s' }\n", "VBAR", $1); }
  | AMPER           { fprintf(stdout, "parsed: { %s: '%s' }\n", "AMPER", $1); }
  | LESS            { fprintf(stdout, "parsed: { %s: '%s' }\n", "LESS", $1); }
  | GREATER         { fprintf(stdout, "parsed: { %s: '%s' }\n", "GREATER", $1); }
  | EQUAL           { fprintf(stdout, "parsed: { %s: '%s' }\n", "EQUAL", $1); }
  | DOT             { fprintf(stdout, "parsed: { %s: '%s' }\n", "DOT", $1); }
  | PERCENT         { fprintf(stdout, "parsed: { %s: '%s' }\n", "PERCENT", $1); }
  | LBRACE          { fprintf(stdout, "parsed: { %s: '%s' }\n", "LBRACE", $1); }
  | RBRACE          { fprintf(stdout, "parsed: { %s: '%s' }\n", "RBRACE", $1); }
  | EQEQUAL         { fprintf(stdout, "parsed: { %s: '%s' }\n", "EQEQUAL", $1); }
  | NOTEQUAL        { fprintf(stdout, "parsed: { %s: '%s' }\n", "NOTEQUAL", $1); }
  | LESSEQUAL       { fprintf(stdout, "parsed: { %s: '%s' }\n", "LESSEQUAL", $1); }
  | GREATEREQUAL    { fprintf(stdout, "parsed: { %s: '%s' }\n", "GREATEREQUAL", $1); }
  | TILDE           { fprintf(stdout, "parsed: { %s: '%s' }\n", "TILDE", $1); }
  | CIRCUMFLEX      { fprintf(stdout, "parsed: { %s: '%s' }\n", "CIRCUMFLEX", $1); }
  | LEFTSHIFT       { fprintf(stdout, "parsed: { %s: '%s' }\n", "LEFTSHIFT", $1); }
  | RIGHTSHIFT      { fprintf(stdout, "parsed: { %s: '%s' }\n", "RIGHTSHIFT", $1); }
  | DOUBLESTAR      { fprintf(stdout, "parsed: { %s: '%s' }\n", "DOUBLESTAR", $1); }
  | PLUSEQUAL       { fprintf(stdout, "parsed: { %s: '%s' }\n", "PLUSEQUAL", $1); }
  | MINEQUAL        { fprintf(stdout, "parsed: { %s: '%s' }\n", "MINEQUAL", $1); }
  | STAREQUAL       { fprintf(stdout, "parsed: { %s: '%s' }\n", "STAREQUAL", $1); }
  | SLASHEQUAL      { fprintf(stdout, "parsed: { %s: '%s' }\n", "SLASHEQUAL", $1); }
  | PERCENTEQUAL    { fprintf(stdout, "parsed: { %s: '%s' }\n", "PERCENTEQUAL", $1); }
  | AMPEREQUAL      { fprintf(stdout, "parsed: { %s: '%s' }\n", "AMPEREQUAL", $1); }
  | VBAREQUAL       { fprintf(stdout, "parsed: { %s: '%s' }\n", "VBAREQUAL", $1); }
  | CIRCUMFLEXEQUAL { fprintf(stdout, "parsed: { %s: '%s' }\n", "CIRCUMFLEXEQUAL", $1); }
  | LEFTSHIFTEQUAL  { fprintf(stdout, "parsed: { %s: '%s' }\n", "LEFTSHIFTEQUAL", $1); }
  | RIGHTSHIFTEQUAL { fprintf(stdout, "parsed: { %s: '%s' }\n", "RIGHTSHIFTEQUAL", $1); }
  | DOUBLESTAREQUAL { fprintf(stdout, "parsed: { %s: '%s' }\n", "DOUBLESTAREQUAL", $1); }
  | DOUBLESLASH     { fprintf(stdout, "parsed: { %s: '%s' }\n", "DOUBLESLASH", $1); }
  | DOUBLESLASHEQUAL{ fprintf(stdout, "parsed: { %s: '%s' }\n", "DOUBLESLASHEQUAL", $1); }
  | ELLIPSIS        { fprintf(stdout, "parsed: { %s: '%s' }\n", "ELLIPSIS", $1); }
  | RARROW          { fprintf(stdout, "parsed: { %s: '%s' }\n", "RARROW", $1); }
  | AT              { fprintf(stdout, "parsed: { %s: '%s' }\n", "AT", $1); }
  | ATEQUAL         { fprintf(stdout, "parsed: { %s: '%s' }\n", "ATEQUAL", $1); }
  | WHITESPACE      { fprintf(stdout, "parsed: { %s: '%s' }\n", "WHITESPACE", $1); }
  | COMMENT         { fprintf(stdout, "parsed: { %s: '%s' }\n", "COMMENT", $1); }
  | NAME            { fprintf(stdout, "parsed: { %s: '%s' }\n", "NAME", $1); }
  | HEX_NUMBER      { fprintf(stdout, "parsed: { %s: '%s' }\n", "HEX_NUMBER", $1); }
  | BIN_NUMBER      { fprintf(stdout, "parsed: { %s: '%s' }\n", "BIN_NUMBER", $1); }
  | OCT_NUMBER      { fprintf(stdout, "parsed: { %s: '%s' }\n", "OCT_NUMBER", $1); }
  | DEC_NUMBER      { fprintf(stdout, "parsed: { %s: '%s' }\n", "DEC_NUMBER", $1); }
  | FLOAT_NUMBER    { fprintf(stdout, "parsed: { %s: '%s' }\n", "FLOAT_NUMBER", $1); }
  | STRING          { fprintf(stdout, "parsed: { %s: '%s' }\n", "STRING", $1); }
  ;

%% /* ================================= End ============================== */
