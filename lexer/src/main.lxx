
%option 8bit
%option yylineno
%option noyywrap nounput
%option nounistd always-interactive

%{
	#include "lex_handle.hh"
%}

COMMENT      #[^\r\n]*
WHITESPACE   [ \f\t]+
NAME         [_a-zA-Z][_a-zA-Z0-9]*

BIN_NUMBER   0[bB](?:_?[01])+
OCT_NUMBER   0[oO](?:_?[0-7])+
DEC_NUMBER   (?:0(?:_?0)*|[1-9](?:_?[0-9])*)
HEX_NUMBER   0[xX](?:_?[0-9a-fA-F])+
FLOAT_NUMBER ([0-9](?:_?[0-9])*\.(?:[0-9](?:_?[0-9])*)?|\.[0-9](?:_?[0-9])*)

STRING       ('[^\n'\\]*(?:\\.[^\n'\\]*)*'|\"[^\n\"\\]*(?:\\.[^\n\"\\]*)*\")

%% /* ================================= Begin ============================== */

"("            return TOKEN_LPAR;
")"            return TOKEN_RPAR;
"["            return TOKEN_LSQB;
"]"            return TOKEN_RSQB;
":"            return TOKEN_COLON;
","            return TOKEN_COMMA;
";"            return TOKEN_SEMI;
"+"            return TOKEN_PLUS;
"-"            return TOKEN_MINUS;
"*"            return TOKEN_STAR;
"/"            return TOKEN_SLASH;
"|"            return TOKEN_VBAR;
"&"            return TOKEN_AMPER;
"<"            return TOKEN_LESS;
">"            return TOKEN_GREATER;
"="            return TOKEN_EQUAL;
"."            return TOKEN_DOT;
"%"            return TOKEN_PERCENT;
"{"            return TOKEN_LBRACE;
"}"            return TOKEN_RBRACE;
"=="           return TOKEN_EQEQUAL;
"!="           return TOKEN_NOTEQUAL;
"<="           return TOKEN_LESSEQUAL;
">="           return TOKEN_GREATEREQUAL;
"~"            return TOKEN_TILDE;
"^"            return TOKEN_CIRCUMFLEX;
"<<"           return TOKEN_LEFTSHIFT;
">>"           return TOKEN_RIGHTSHIFT;
"**"           return TOKEN_DOUBLESTAR;
"+="           return TOKEN_PLUSEQUAL;
"-="           return TOKEN_MINEQUAL;
"*="           return TOKEN_STAREQUAL;
"/="           return TOKEN_SLASHEQUAL;
"%="           return TOKEN_PERCENTEQUAL;
"&="           return TOKEN_AMPEREQUAL;
"|="           return TOKEN_VBAREQUAL;
"^="           return TOKEN_CIRCUMFLEXEQUAL;
"<<="          return TOKEN_LEFTSHIFTEQUAL;
">>="          return TOKEN_RIGHTSHIFTEQUAL;
"**="          return TOKEN_DOUBLESTAREQUAL;
"//"           return TOKEN_DOUBLESLASH;
"//="          return TOKEN_DOUBLESLASHEQUAL;
"..."          return TOKEN_ELLIPSIS;
"->"           return TOKEN_RARROW;
"@"            return TOKEN_AT;
"@="           return TOKEN_ATEQUAL;

"def"          return TOKEN_DEF;
"extern"       return TOKEN_EXTERN;

{WHITESPACE}   /* return handle::WHITESPACE(yytext); */
{COMMENT}      return handle::COMMENT(yytext);
{NAME}         return handle::NAME(yytext);
{BIN_NUMBER}   return handle::BIN_NUMBER(yytext);
{OCT_NUMBER}   return handle::OCT_NUMBER(yytext);
{DEC_NUMBER}   return handle::DEC_NUMBER(yytext);
{HEX_NUMBER}   return handle::HEX_NUMBER(yytext);
{FLOAT_NUMBER} return handle::FLOAT_NUMBER(yytext);
{STRING}       return handle::STRING(yytext);

.              /* ignore */

<<EOF>>        return TOKEN_YYEOF;

%% /* ================================= End ============================== */
